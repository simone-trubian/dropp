package dropp

import (
	"net/http"
	"time"

	gq "github.com/PuerkitoBio/goquery"
)

// Snapshot contains a snapshot of the current status of an item.
type Snapshot struct {
	Availability AvaComp
	OnEbay       bool
	Price        float64
	CreatedAt    time.Time
}

// SnapshotDiff Is created if there is a difference between the current and the
// previous snaphot.
type SnapshotDiff struct {
	ItemName       string
	ItemURL        string
	PreviousAva    AvaComp
	PreviousStatus bool
	PreviousPrice  float64
	CurrentAva     AvaComp
	CurrentStatus  bool
	CurrentPrice   float64
}

// EbayPrice contains the price and currency as fetched from the Ebay service
type EbayPrice struct {
	CurrencyID string  `json:"_currencyID"`
	Value      float64 `json:"value"`
}

// EbayItem is the full item generated by the Ebay service
type EbayItem struct {
	CurrentPrice EbayPrice `json:"current_price"`
	ID           string    `json:"id"`
	ItemName     string    `json:"name"`
	StockCount   int       `json:"quantity"`
	SoldCount    int       `json:"quantity_sold"`
	Status       string    `json:"status"`
	ItemPageURL  string    `json:"url"`
}

func (snap *Snapshot) getBGAva(response *http.Response) {
	// Scrape the page and get availability
	doc, err := gq.NewDocumentFromResponse(response)
	if err != nil {
		panic(err.Error())
	}
	ava := doc.Find(".status").Text()
	snap.Availability = NewAva(ava)
	return
}
